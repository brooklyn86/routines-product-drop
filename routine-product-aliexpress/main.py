# Generated by Selenium IDE
import time
import json

import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestAliex():
  def __init__(self):
    self.window_handles = list()
    self.vars = None
    self.root = None
    self.win4215 = None
    self.win5211 = None
    self.win5211 = None
    self.host = 'http://localhost:3333'
  def setup_method(self):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.window_handles
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()

  def get_product_id(self):
    self.driver.switch_to.window(self.window_handles[-1])
    self.wait_for_window(3000)
    products = self.driver.find_elements(By.CLASS_NAME, 'rankings-item')
    for product in products:
      productId = product.get_attribute('data-productid')
      print(json.dumps({"product_id" : productId}))
      if(productId != None):
        product.click()
        time.sleep(5)
        self.window_handles = self.driver.window_handles
        self.driver.switch_to.window(self.window_handles[-1])
        video = self.driver.find_element(By.ID, 'item-video').get_attribute('src')
        print(video)
        self.driver.close()
        self.window_handles = self.driver.window_handles
        self.driver.switch_to.window(self.window_handles[-1])
        self.create_product(productId, video)


  def create_product(self, productId, video):
    request = requests.post("{}/product".format(self.host), json={"product_id" : productId, "video" : video})
    print(request.text)

  def test_aliex(self):
    self.driver.get("https://sale.aliexpress.com/__pc/rankings_list.htm?spm=a2g0o.home.toprank.1.31c81c91GEqBit")
    self.driver.set_window_size(1366, 741)
    self.wait_for_window(10000)
    navbar_category = self.driver.find_element(By.ID, "nav-container")
    categories = navbar_category.find_elements(By.CLASS_NAME,'nav-item' )
    for category in categories:
      category.click()
      print("Clicando na categoria")
      self.wait_for_window(10000)
      self.driver.execute_script("window.scrollTo(0,0)")
      self.window_handles = self.driver.window_handles
      products_cells = self.driver.find_elements(By.CLASS_NAME, "product-cell")
      for product_cell in products_cells:
        product_cell.click()
        self.window_handles = self.driver.window_handles
        self.driver.switch_to.window(self.window_handles[-1])
        self.get_product_id()
        self.driver.close()
        self.window_handles = self.driver.window_handles
        self.driver.switch_to.window(self.window_handles[-1])
        time.sleep(3)


alieWrapper = TestAliex()
alieWrapper.setup_method()
alieWrapper.test_aliex()
